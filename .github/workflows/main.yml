name: GigaFile Link Finder

on:
  workflow_dispatch:  # 手動実行のみ
    inputs:
      duration:
        description: 'Duration to run (minutes)'
        required: true
        default: '10'
        type: choice
        options:
          - '5'
          - '10'
          - '15'
          - '20'
      workers:
        description: 'Number of workers'
        required: true
        default: '25'
        type: choice
        options:
          - '10'
          - '25'
          - '50'

jobs:
  find-links:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create Link Finder Script
        run: |
          cat > gigafile_finder.py << 'EOL'
          import os
          import random
          import string
          import time
          import requests
          import re
          from datetime import datetime, timedelta
          import concurrent.futures
          import logging
          import sys

          class GigafileLinkFinder:
              def __init__(self, max_duration_minutes, num_workers):
                  self.base_url = "https://xgf.nu/"
                  self.num_workers = num_workers
                  self.max_duration = timedelta(minutes=max_duration_minutes)
                  self.found_links_file = "found_links.txt"
                  self.stats_file = "stats.txt"
                  self.status_file = "status.md"
                  
                  logging.basicConfig(
                      level=logging.INFO,
                      format='%(asctime)s - %(levelname)s - %(message)s'
                  )
                  self.logger = logging.getLogger(__name__)
                  
                  self.start_time = datetime.utcnow()
                  self.total_requests = 0
                  self.found_links = 0
                  
                  # GitHubで実行している場合の環境変数を取得
                  self.github_workspace = os.getenv('GITHUB_WORKSPACE', '')
                  self.github_repository = os.getenv('GITHUB_REPOSITORY', '')
                  self.github_run_id = os.getenv('GITHUB_RUN_ID', '')

              def generate_random_string(self, length):
                  chars = string.ascii_letters + string.digits
                  return ''.join(random.choice(chars) for _ in range(length))

              def save_link(self, url, random_string):
                  current_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
                  with open(self.found_links_file, "a", encoding='utf-8') as f:
                      f.write(f"{current_time} | {random_string} | {url}\n")
                  self.found_links += 1
                  self.update_status()

              def update_stats(self):
                  current_time = datetime.utcnow()
                  runtime = (current_time - self.start_time).total_seconds()
                  
                  with open(self.stats_file, "w", encoding='utf-8') as f:
                      f.write(f"Statistics as of {current_time.strftime('%Y-%m-%d %H:%M:%S')} UTC\n")
                      f.write("-" * 50 + "\n")
                      f.write(f"Total requests made: {self.total_requests:,}\n")
                      f.write(f"Found links: {self.found_links:,}\n")
                      f.write(f"Success rate: {(self.found_links/self.total_requests*100 if self.total_requests else 0):.4f}%\n")
                      f.write(f"Running time: {runtime:.2f} seconds\n")
                      f.write(f"Requests per second: {self.total_requests/runtime:.2f}\n")
                      f.write(f"Workers: {self.num_workers}\n")

              def update_status(self):
                  current_time = datetime.utcnow()
                  runtime = (current_time - self.start_time).total_seconds()
                  
                  with open(self.status_file, "w", encoding='utf-8') as f:
                      f.write("# GigaFile Link Finder Status\n\n")
                      f.write(f"## Current Run Information\n")
                      f.write(f"- **Run ID**: {self.github_run_id}\n")
                      f.write(f"- **Repository**: {self.github_repository}\n")
                      f.write(f"- **Start Time**: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')} UTC\n")
                      f.write(f"- **Current Time**: {current_time.strftime('%Y-%m-%d %H:%M:%S')} UTC\n")
                      f.write(f"- **Running Time**: {timedelta(seconds=int(runtime))}\n")
                      f.write(f"- **Workers**: {self.num_workers}\n\n")
                      
                      f.write("## Statistics\n")
                      f.write(f"- **Total Requests**: {self.total_requests:,}\n")
                      f.write(f"- **Found Links**: {self.found_links:,}\n")
                      f.write(f"- **Success Rate**: {(self.found_links/self.total_requests*100 if self.total_requests else 0):.4f}%\n")
                      f.write(f"- **Requests/Second**: {self.total_requests/runtime:.2f}\n\n")
                      
                      if self.found_links > 0:
                          f.write("## Recent Findings\n")
                          f.write("| Time (UTC) | Code | URL |\n")
                          f.write("|------------|------|-----|\n")
                          
                          if os.path.exists(self.found_links_file):
                              with open(self.found_links_file, 'r', encoding='utf-8') as links:
                                  recent_links = list(links)[-10:]  # 最新10件
                                  for link in recent_links:
                                      time, code, url = link.strip().split(" | ")
                                      f.write(f"| {time} | {code} | {url} |\n")

              def worker(self, worker_id):
                  session = requests.Session()
                  session.headers.update({
                      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                  })

                  while (datetime.utcnow() - self.start_time) < self.max_duration:
                      try:
                          length = random.randint(4, 5)
                          random_string = self.generate_random_string(length)
                          url = self.base_url + random_string
                          
                          print(f"\r[Worker {worker_id}] [+] [ {random_string} ] mining... | Found: {self.found_links} | Requests: {self.total_requests}", end="")
                          
                          response = session.get(url, allow_redirects=True, timeout=10)
                          self.total_requests += 1
                          
                          if self.total_requests % 100 == 0:
                              self.update_stats()
                              self.update_status()

                          final_url = response.url
                          
                          if re.match(r'^https://\d+\.gigafile\.nu/[a-z0-9-]+$', final_url):
                              print(f"\n[Worker {worker_id}] [*] [ {random_string} ] discover!! --> \033[33m{final_url}\033[0m")
                              self.save_link(final_url, random_string)
                          
                          time.sleep(0.1)
                          
                      except requests.RequestException:
                          continue
                      except Exception as e:
                          self.logger.error(f"Worker {worker_id} - Error: {str(e)}")
                          continue

              def run(self):
                  print(f"""
                  GigaFile Link Finder
                  Simple GigaFile Link Collector [GitHub Actions Version]
                  Run ID: {self.github_run_id}
                  Repository: {self.github_repository}
                  Start Time: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')} UTC
                  Duration: {self.max_duration.total_seconds()/60:.1f} minutes
                  Workers: {self.num_workers}
                  """)

                  with concurrent.futures.ThreadPoolExecutor(max_workers=self.num_workers) as executor:
                      futures = [executor.submit(self.worker, i) for i in range(self.num_workers)]
                      try:
                          concurrent.futures.wait(futures)
                      except KeyboardInterrupt:
                          print("\nGracefully shutting down...")
                      finally:
                          self.update_stats()
                          self.update_status()

          if __name__ == "__main__":
              duration_minutes = int(sys.argv[1]) if len(sys.argv) > 1 else 10
              num_workers = int(sys.argv[2]) if len(sys.argv) > 2 else 25
              
              finder = GigafileLinkFinder(duration_minutes, num_workers)
              finder.run()
          EOL

      - name: Run Link Finder
        run: python gigafile_finder.py ${{ inputs.duration }} ${{ inputs.workers }}

      - name: Create Results Directory
        run: |
          mkdir -p results
          mv found_links.txt stats.txt status.md results/ || true

      - name: Commit and Push Results
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if [ -d "results" ]; then
            current_time=$(date -u +"%Y-%m-%d_%H-%M-%S")
            git add results/
            git commit -m "Update Link Finder results: ${current_time} UTC" || echo "No changes to commit"
            git push
          fi
