name: Gigafile XGF Explorer Repository

on:
  schedule:
    - cron: '*/2 * * * *'  # 2分ごとに実行
  workflow_dispatch:  # 手動実行用

jobs:
  explore:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Create XGF Explorer Script
        run: |
          cat > XgfExplorer.cs << 'EOL'
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text.RegularExpressions;
          using System.Collections.Generic;
          using System.IO;
          using System.Linq;
          using System.Net;

          class Program
          {
              private static readonly HttpClient client = new HttpClient(new HttpClientHandler
              {
                  AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate
              });
              private static readonly string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
              private static readonly Random random = new Random();
              private static readonly string baseUrl = "https://xgf.nu/";
              private static readonly string resultFile = "data/found_files.txt";
              private static readonly string summaryFile = "data/summary.md";
              private static readonly HashSet<string> existingCodes = new HashSet<string>();
              private const int MAX_ATTEMPTS = 100; // 増加
              private const int BATCH_SIZE = 10; // 並列処理数増加
              private static readonly TimeSpan MAX_RUNTIME = TimeSpan.FromMinutes(1.5);

              static async Task Main()
              {
                  Directory.CreateDirectory("data");
                  client.DefaultRequestHeaders.Add("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
                  client.DefaultRequestHeaders.Add("Accept-Language", "en-US,en;q=0.5");
                  client.DefaultRequestHeaders.Add("Accept-Encoding", "gzip, deflate, br");
                  client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                  client.DefaultRequestHeaders.Add("Upgrade-Insecure-Requests", "1");
                  client.Timeout = TimeSpan.FromSeconds(10);

                  var startTime = DateTime.UtcNow;
                  LoadExistingCodes();
                  
                  var foundFiles = new List<string>();
                  var processedCount = 0;
                  
                  Console.WriteLine($"Starting exploration at {startTime:yyyy-MM-dd HH:mm:ss UTC}");
                  
                  while (processedCount < MAX_ATTEMPTS && DateTime.UtcNow - startTime < MAX_RUNTIME)
                  {
                      var batchTasks = new List<Task>();
                      var batchSize = Math.Min(BATCH_SIZE, MAX_ATTEMPTS - processedCount);
                      
                      for (int i = 0; i < batchSize; i++)
                      {
                          var code = GenerateUniqueCode();
                          if (code != null)
                          {
                              batchTasks.Add(ProcessCode(code, foundFiles));
                              processedCount++;
                          }
                      }
                      
                      await Task.WhenAll(batchTasks);
                      await Task.Delay(500); // 待機時間短縮
                  }

                  var endTime = DateTime.UtcNow;
                  Console.WriteLine($"Exploration completed at {endTime:yyyy-MM-dd HH:mm:ss UTC}");
                  Console.WriteLine($"Total runtime: {(endTime - startTime).TotalSeconds:F1} seconds");
                  Console.WriteLine($"Total requests: {processedCount}");
                  
                  await SaveResults(foundFiles);
                  await UpdateSummary(foundFiles, startTime, endTime, processedCount);
              }

              static void LoadExistingCodes()
              {
                  if (File.Exists(resultFile))
                  {
                      foreach (var line in File.ReadLines(resultFile))
                      {
                          var parts = line.Split('|');
                          if (parts.Length > 0)
                          {
                              var code = parts[0].Trim();
                              existingCodes.Add(code);
                          }
                      }
                      Console.WriteLine($"Loaded {existingCodes.Count} existing codes");
                  }
              }

              static string GenerateUniqueCode()
              {
                  for (int i = 0; i < 20; i++) // 試行回数増加
                  {
                      var code = new string(Enumerable.Range(0, 4)
                          .Select(_ => chars[random.Next(chars.Length)])
                          .ToArray());
                      
                      if (!existingCodes.Contains(code))
                      {
                          existingCodes.Add(code);
                          return code;
                      }
                  }
                  return null;
              }

              static async Task ProcessCode(string code, List<string> foundFiles)
              {
                  try
                  {
                      var result = await CheckUrl(code);
                      if (result.exists)
                      {
                          var fileInfo = $"{code} | {result.filename} | {result.size:N0} bytes | {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} | {baseUrl}{code}";
                          lock (foundFiles)
                          {
                              foundFiles.Add(fileInfo);
                              Console.WriteLine($"[FOUND] {fileInfo}");
                          }
                      }
                  }
                  catch (Exception ex)
                  {
                      if (ex is HttpRequestException || ex is TaskCanceledException)
                      {
                          Console.WriteLine($"Network error checking {code}");
                      }
                      else
                      {
                          Console.WriteLine($"Error checking {code}: {ex.Message}");
                      }
                  }
              }

              static async Task<(bool exists, string filename, long size)> CheckUrl(string code)
              {
                  using var request = new HttpRequestMessage(HttpMethod.Get, baseUrl + code);
                  request.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36");
                  
                  using var response = await client.SendAsync(request);
                  
                  if (response.RequestMessage.RequestUri.Host == "gigafile.nu")
                  {
                      var responseUri = response.RequestMessage.RequestUri.ToString();
                      if (responseUri.Contains("/download.php") || responseUri.Contains("/dl_zip.php"))
                      {
                          using var fileResponse = await client.SendAsync(new HttpRequestMessage(HttpMethod.Head, responseUri));
                          var contentDisposition = fileResponse.Headers.Contains("Content-Disposition") 
                              ? fileResponse.Headers.GetValues("Content-Disposition").FirstOrDefault() 
                              : null;
                          
                          if (!string.IsNullOrEmpty(contentDisposition))
                          {
                              var match = Regex.Match(contentDisposition, @"filename[^;=\n]*=((['""]).*?\2|[^;\n]*)");
                              var filename = match.Success ? match.Groups[1].Value.Trim('"') : "unknown";
                              var size = fileResponse.Content.Headers.ContentLength ?? 0;
                              
                              // .txtファイル以外も記録するように変更
                              return (true, filename, size);
                          }
                      }
                  }
                  
                  return (false, string.Empty, 0);
              }

              static async Task SaveResults(List<string> foundFiles)
              {
                  if (foundFiles.Count > 0)
                  {
                      var newContent = new List<string>();
                      
                      if (File.Exists(resultFile))
                      {
                          newContent.AddRange(File.ReadLines(resultFile));
                      }
                      
                      newContent.AddRange(foundFiles);
                      newContent = newContent.Distinct().OrderBy(x => x).ToList();
                      
                      await File.WriteAllLinesAsync(resultFile, newContent);
                      Console.WriteLine($"Updated results file. Total entries: {newContent.Count}");
                  }
              }

              static async Task UpdateSummary(List<string> newFiles, DateTime startTime, DateTime endTime, int totalRequests)
              {
                  var totalFiles = File.Exists(resultFile) ? File.ReadLines(resultFile).Count() : 0;
                  var summaryContent = new List<string>
                  {
                      "# XGF Explorer Summary",
                      "",
                      $"Last Updated: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss UTC}",
                      "",
                      "## Statistics",
                      $"- Total files found: {totalFiles}",
                      $"- Files found in last run: {newFiles.Count}",
                      $"- Last run duration: {(endTime - startTime).TotalSeconds:F1} seconds",
                      $"- Requests made: {totalRequests}",
                      $"- Success rate: {(newFiles.Count * 100.0 / totalRequests):F2}%",
                      "",
                      "## Recent Findings"
                  };

                  var recentFiles = newFiles
                      .Union(File.Exists(resultFile) ? File.ReadLines(resultFile) : Enumerable.Empty<string>())
                      .OrderByDescending(x => DateTime.Parse(x.Split('|')[3].Trim()))
                      .Take(20);

                  summaryContent.Add("| Code | Filename | Size | Found At | Link |");
                  summaryContent.Add("|------|----------|------|----------|------|");
                  
                  foreach (var file in recentFiles)
                  {
                      var parts = file.Split('|').Select(p => p.Trim()).ToArray();
                      summaryContent.Add($"| {parts[0]} | {parts[1]} | {parts[2]} | {parts[3]} | {parts[4]} |");
                  }

                  await File.WriteAllLinesAsync(summaryFile, summaryContent);
              }
          }
          EOL

      - name: Compile and Run Explorer
        id: explore
        run: |
          dotnet new console
          mv XgfExplorer.cs Program.cs
          dotnet build
          dotnet run

      - name: Commit and Push Results
        if: success()
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if [ -d data ]; then
            git add data/
            git commit -m "Update exploration results: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" || echo "No changes to commit"
            git push
          fi

permissions:
  contents: write
